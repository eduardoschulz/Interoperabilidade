{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Interoperabilidade","text":""},{"location":"#sections","title":"Sections:","text":""},{"location":"#rans","title":"RANs:","text":"<ul> <li>OpenAirInterface</li> <li>srsRAN</li> </ul>"},{"location":"#core-network","title":"Core Network:","text":"<ul> <li>Open5GS</li> <li>OpenAirInterface-CN</li> <li>Free5GC</li> </ul>"},{"location":"#rics","title":"RICs:","text":"<ul> <li>Flexric</li> <li>ORAN-SC</li> </ul>"},{"location":"core-network/cores/","title":"Core Networks","text":""},{"location":"core-network/cores/#openairinterface-cn","title":"OpenAirInterface CN","text":"<p>Setup</p>"},{"location":"core-network/cores/#free5gc","title":"Free5GC","text":"<p>Setup</p>"},{"location":"core-network/cores/#open5gs","title":"Open5GS","text":"<p>Setup</p>"},{"location":"core-network/free5gc/","title":"Free5GC Core Network","text":""},{"location":"core-network/free5gc/#1-set-up","title":"1. Set Up","text":"<p>In our test we used the version v3.3.0.</p>"},{"location":"core-network/free5gc/#11-core-host-configurations","title":"1.1 Core-host Configurations","text":"<pre><code>sudo sysctl net.ipv4.conf.all.forwarding=1\nsudo iptables -P FORWARD ACCEPT\n</code></pre>"},{"location":"core-network/free5gc/#12-clone-free5gc-compose","title":"1.2 Clone free5gc-compose","text":"<pre><code>git clone https://github.com/free5gc/free5gc-compose\ngit checkout v3.3.0\n</code></pre>"},{"location":"core-network/free5gc/#13-changing-core-settings","title":"1.3 Changing Core Settings","text":"<pre><code>git clone https://github.com/eduardoschulz/Interoperabilidade.git\ncd Interoperabilidade/core-networks/free5gc/core-networks/FREE5GC\ncp -r config path/to/free5gc-compose \n</code></pre>"},{"location":"core-network/free5gc/#14-gnb-host-configurations","title":"1.4 gNB-host Configurations","text":"<p>You also must configure a route to the internal docker network so that the gNB can make a connection.</p> <pre><code>sudo ip route add 10.100.200.0/24 via {ip_addr_corehost} dev {interface}\n\n#example\nsudo ip route add 10.100.200.0/24 via 191.4.205.38 dev br01\n</code></pre>"},{"location":"core-network/free5gc/#20-installing-gtp-u-kernel-module","title":"2.0 Installing GTP-U Kernel Module","text":"<pre><code>git clone https://github.com/free5gc/gtp5g.git &amp;&amp; cd gtp5g\nmake clean &amp;&amp; make\nsudo make install\n</code></pre>"},{"location":"core-network/free5gc/#30-deploying-the-core-network","title":"3.0 Deploying the Core Network","text":"<ul> <li>To start the core <pre><code>cd path-to/free5gc-compose\ndocker compose up -d\n</code></pre></li> <li>To stop the core <pre><code>docker compose down \n</code></pre></li> </ul>"},{"location":"core-network/free5gc/#31-adding-ue-to-core-database","title":"3.1 Adding UE to Core Database","text":"<p>To set up your UEs you'll need to go to the free5gc webpage on your machine. You should see a login screen when accessing http://:3000. The credentials are admin and the password is free5gc."},{"location":"core-network/free5gc/#40-more-information","title":"4.0 More Information","text":"<p>Free5GC - Github Page Free5GC - Compose Free5GC - Forum</p>"},{"location":"core-network/oaicn/","title":"OAI Core Network","text":""},{"location":"core-network/oaicn/#1-set-up","title":"1. Set Up","text":"<p>For our test the version 1.5.0 was used.</p>"},{"location":"core-network/oaicn/#11-core-host-configurations","title":"1.1 Core-host Configurations","text":"<pre><code>sudo sysctl net.ipv4.conf.all.forwarding=1\nsudo iptables -P FORWARD ACCEPT\n</code></pre>"},{"location":"core-network/oaicn/#12-clone-oai-cn5g-fed","title":"1.2 Clone oai-cn5g-fed","text":"<pre><code>git clone https://gitlab.eurecom.fr/oai/cn5g/oai-cn5g-fed.git\ngit checkout v1.5.0\n</code></pre>"},{"location":"core-network/oaicn/#13-changing-core-settings","title":"1.3 Changing Core Settings","text":"<pre><code>git clone https://github.com/eduardoschulz/Interoperabilidade.git\ncd Interoperabilidade/core-networks/OAI-CN/\n\n\nmv docker-compose-basic-nrf.yaml ~/oai-cn5g-fed/docker-compose/\n</code></pre>"},{"location":"core-network/oaicn/#14-gnb-host-configurations","title":"1.4 gNB-host Configurations","text":"<p>You also must configure a route to the internal docker network so that the gNB can make a connection.</p> <pre><code>sudo ip route add 192.168.70.128/26 via {ip_addr_corehost} dev {interface}\n\n#example\nsudo ip route add 192.168.70.128/26 via 191.4.205.38 dev br01\n</code></pre>"},{"location":"core-network/oaicn/#20-deploying-the-core-network","title":"2.0 Deploying the Core Network","text":"<ul> <li>To start the core <pre><code>cd path-to/oai-cn5g-fed/docker-compose\npython3 core-networks.py --type start-basic --scenario 1\n</code></pre></li> <li>To stop the core <pre><code>python3 core-networks.py --type stop-basic --scenario 1\n</code></pre></li> </ul>"},{"location":"core-network/oaicn/#21-adding-ue-to-core-database","title":"2.1 Adding UE to Core Database","text":"<pre><code>docker exec -it mysql bash\nmysql -u root -p\n\npassword: linux \n</code></pre> <p><pre><code>use oai_db;\nINSERT INTO `AuthenticationSubscription` (`ueid`, `authenticationMethod`, `encPermanentKey`, `protectionParameterId`, `sequenceNumber`, `authenticationManagementField`, `algorithmId`, `encOpcKey`, `encTopcKey`, `vectorGenerationInHss`, `n5gcAuthMethod`, `rgAuthenticationInd`, `supi`) VALUES\n('001010123456789', '5G_AKA', '41B7157E3337F0ADD8DA89210D89E17F', '41B7157E3337F0ADD8DA89210D89E17F', '{\\\"sqn\\\": \\\"000000000020\\\", \\\"sqnScheme\\\": \\\"NON_TIME_BASED\\\", \\\"lastIndexes\\\": {\\\"ausf\\\": 0}}', '8000', 'milenage', '1CD638FC96E02EBD35AA0D41EB6F812F', NULL, NULL, NULL, NULL, '001010123456789');\n\nINSERT INTO `SessionManagementSubscriptionData` (`ueid`, `servingPlmnid`, `singleNssai`, `dnnConfigurations`) VALUES\n('001010123456789', '00101', '{\\\"sst\\\": 222, \\\"sd\\\": \\\"123\\\"}','{\\\"default\\\":{\\\"pduSessionTypes\\\":{ \\\"defaultSessionType\\\": \\\"IPV4\\\"},\\\"sscModes\\\": {\\\"defaultSscMode\\\": \\\"SSC_MODE_1\\\"},\\\"5gQosProfile\\\": {\\\"5qi\\\": 6,\\\"arp\\\":{\\\"priorityLevel\\\": 1,\\\"preemptCap\\\": \\\"NOT_PREEMPT\\\",\\\"preemptVuln\\\":\\\"NOT_PREEMPTABLE\\\"},\\\"priorityLevel\\\":1},\\\"sessionAmbr\\\":{\\\"uplink\\\":\\\"1000Mbps\\\", \\\"downlink\\\":\\\"1000Mbps\\\"},\\\"staticIpAddress\\\":[{\\\"ipv4Addr\\\": \\\"12.1.1.4\\\"}]}}');\n</code></pre> The configuration above is only going to last until the core is restarted. If you want to make this static you must make changes on the db files inside path/oaicn/docker-compose/databases/.</p> <p>If you want to use ours:</p> <pre><code>rm -r ~/oai-cn5g-fed/docker-compose/database\ncp -r database ~/oai-cn5g-fed/docker-compose/database\n</code></pre>"},{"location":"core-network/oaicn/#30-more-information","title":"3.0 More Information","text":"<p>Basic Deployment using Docker Compose</p>"},{"location":"core-network/open5gs/","title":"Open5gs Core Network","text":""},{"location":"core-network/open5gs/#1-set-up","title":"1. Set Up","text":"<p>In our test we used the version v2.7.0</p>"},{"location":"core-network/open5gs/#11-core-host-configurations","title":"1.1 Core-host Configurations","text":"<pre><code>sudo sysctl net.ipv4.conf.all.forwarding=1\nsudo iptables -P FORWARD ACCEPT\n</code></pre>"},{"location":"core-network/open5gs/#12-clone-free5gc-compose","title":"1.2 Clone free5gc-compose","text":"<pre><code>git clone https://github.com/herlesupreeth/docker_open5gs\ngit checkout v2.7.0\n</code></pre>"},{"location":"core-network/open5gs/#13-changing-core-settings","title":"1.3 Changing Core Settings","text":"<pre><code>git clone https://github.com/eduardoschulz/Interoperabilidade.git\ncd Interoperabilidade/core-networks/OPEN5GS\ncp sa-deploy.yaml /path/to/docker_open5gs/.\ncp .env /path/to/docker_open5gs/. \n\ncp -r smf/ /path/to/docker_open5gs/ #here you need to modify your dnn \ncp -r upf/ /path/to/docker_open5gs/ #same thing as above\n</code></pre>"},{"location":"core-network/open5gs/#20-deploying-the-core-network","title":"2.0 Deploying the Core Network","text":"<ul> <li>To start the core <pre><code>cd path-to/docker_open5gs\ndocker compose -f sa-deploy.yaml up -d\n</code></pre></li> <li>To stop the core <pre><code>docker compose down \n</code></pre></li> </ul>"},{"location":"core-network/open5gs/#31-adding-ue-to-core-database","title":"3.1 Adding UE to Core Database","text":"<p>To set up your UEs you'll need to go to the open5gs webpage on your machine. You should see a login screen when accessing http://:3000. The credentials are admin and the password is 1423."},{"location":"core-network/open5gs/#40-more-information","title":"4.0 More Information","text":""},{"location":"rans/oai/","title":"OpenAirInterface","text":"<p>OpenAirInteface For our testing we used the 2.1 release of the project.</p>"},{"location":"rans/oai/#how-to-build","title":"How to Build","text":"<ul> <li>UHD - Build Instructions</li> <li>OAI - Build Instructions(No E2Agent)</li> <li>OAI - Build Instructions(Flexric)</li> </ul>"},{"location":"rans/oai/#build-with-flexric","title":"Build with Flexric","text":"<p>In this setup we have used OpenAirInterface built with the --build-e2 flag.</p>"},{"location":"rans/oai/#0-required-dependencies","title":"0. Required dependencies","text":""},{"location":"rans/oai/#01-building-swig","title":"0.1 Building Swig","text":"<pre><code>$ git clone https://github.com/swig/swig.git &amp;&amp; cd swig\n$ git checkout release-4.2\n$ ./autogen.sh\n$ ./configure --prefix=/usr/\n$ make -j$(nproc)\n$ sudo make install\n</code></pre>"},{"location":"rans/oai/#02-installing-other-dependencies","title":"0.2 Installing other dependencies","text":"<pre><code>$ sudo apt install libsctp-dev python3 cmake-curses-gui libpcre2-dev\n</code></pre>"},{"location":"rans/oai/#1-building-openairinterface","title":"1. Building OpenAirInterface","text":"<pre><code>$ git clone https://gitlab.eurecom.fr/oai/openairinterface5g oai\n$ cd oai\n$ git checkout v2.1.0\n$ ./build_oai -w USRP --gNB --nrUE --build-e2 \n</code></pre>"},{"location":"rans/oai/#2-building-flexric","title":"2. Building Flexric","text":"<pre><code>$ cd oai/openair2/E2AP/flexric\n$ cmake -DSWIG_DIR=/usr/share/swig/4.2.0/ -DSWIG_EXECUTABLE=/usr/bin/swig -DCMAKE_C_COMPILER=gcc-10 -DCMAKE_CXX_COMPILER=g++-10 ..\n$ make -j$(nproc)\n$ sudo make install \n</code></pre>"},{"location":"rans/rans/","title":"RANs","text":""},{"location":"rans/rans/#open-air-interface","title":"Open Air Interface","text":"<p>OpenAirInteface For our testing it was used the tag 2023.w50.</p>"},{"location":"rans/rans/#how-to-build","title":"How to Build","text":"<ul> <li>UHD - Build Instructions</li> <li>OAI - Build Instructions(No E2Agent)</li> <li>OAI - Build Instructions(Flexric)</li> </ul>"},{"location":"rans/rans/#build-with-flexric","title":"Build with Flexric","text":"<p>In this setup we have used oai built with the --build-e2 flag. <pre><code>## 0.1 Building Swig\n\n$ git clone https://github.com/swig/swig.git &amp;&amp; cd swig\n$ git checkout release-4.1\n$ ./autogen.sh\n$ ./configure --prefix=/usr/\n$ make -j12\n$ sudo make install\n\n## 0.2 Required dependencies\n\n$ sudo apt install libsctp-dev python3 cmake-curses-gui libpcre2-dev\n\n## 1. Building OAI\n\n$ git clone https://gitlab.eurecom.fr/oai/openairinterface5g oai\n$ cd oai\n$ git checkout 2023.w50\n$ ./build_oai -w USRP --gNB --nrUE --build-e2 --ninja\n\n## 2. Building Flexric\n\n$ cd oai/openair2/E2AP/flexric\n$ mkdir build &amp;&amp; cd build \n$ cmake -D CMAKE_C_COMPILER=gcc-10 -D CMAKE_CXX_COMPILER=g++-10 ..\n$ make -j8\n$ sudo make install \n</code></pre></p>"},{"location":"rans/rans/#srsran","title":"srsRAN","text":""},{"location":"rans/srsran/","title":"SRSRAN","text":""},{"location":"rans/srsran/#building","title":"Building","text":"<p>Version: 23.10.1 UHD version: 4.6.0.0 OS version: Ubuntu Server 22.04 LTS</p> <p>For building we recommend following the official documentation available here to build srsRAN from source. The UHD driver was used and built from sources following this guide.</p>"},{"location":"rans/srsran/#running","title":"Running","text":"<p>After building and installing srsRAN we recommend running the srsran_performance script available in the official srsran_project repository. Since these changes do not persist remember to re-run them if the machine is restarted.</p> <p>For each of the core networks there is an accompanying helper script, however, you still need to manually change the second line of each script so that they have the name of your network interface.</p> <p>Finnaly, free5gc and OAI CN require a change in routing table of the gNB host. This change can be applied with the commands: - Free5Gc: <code>sudo ip route add 10.100.200.0/24 via {external addr of the core host} dev {name of the network interface used to reach the core host}</code>. - OAI CN: <code>sudo ip route add 10.100.200.0/26 via {external addr of the core host} dev {name of the network interface used to reach the core host}</code>.</p>"},{"location":"rics/","title":"Non RealTime RIC","text":""},{"location":"rics/#installation","title":"Installation","text":""},{"location":"rics/#docker-and-kubernetes-skip-if-already-installed","title":"Docker and kubernetes (skip if already installed)","text":"<p>We installed the non rt ric using kubernetes and containers, to do so we used kubeadm and containerd.</p> <p>We've started with a machine running Ubuntu Desktop 22.04 LTS and installed docker following their own documentation. </p> <p>For our cgroup driver we chose systemd. Our configuration file can be found here. Make sure to install kubectl as well. As our pod network add-on, we picked flannel. Finally we removed the <code>node-role.kubernetes.io/control-plane:NoSchedule</code> taint from all nodes.</p> <p>Now we should have a healthy kubernetes cluster running so its time to deploy the NearRTRIC itself.</p>"},{"location":"rics/oran-sc/","title":"Near RealTime RIC","text":""},{"location":"rics/oran-sc/#installation","title":"Installation","text":""},{"location":"rics/oran-sc/#containerd-and-kubernetes-skip-if-already-installed","title":"Containerd and kubernetes (skip if already installed)","text":"<p>First things first install containerd, kubeadm and kubectl. The cluster configuration passed to kubeadm is available (here)[RICs/near-realtime/oran-sc/config.yaml] and the only required modification is under the \"CertSANs\" option you should change to the hostname of your machine. This modification ensures that the self-signed certificates generated by kubeadm will remain valid for your machine after a change in IP address, which is common for us, as long as you as acessing it using its hostname.</p> <p>&lt;--! xApps built with docker need to be imported into containerd under the k8s.io namespace --&gt;</p>"},{"location":"rics/oran-sc/#step-by-step-kubernetes-setup","title":"Step by step kubernetes setup","text":"<p>Create the kubernetes cluster using the (config.yaml)[RICs/near-realtime/oran-sc/config.yaml] provided. <pre><code>kubeadm init --config config.yaml\n</code></pre></p> <p>Install flannel for networking to work <pre><code>kubectl apply -f https://github.com/flannel-io/flannel/releases/latest/download/kube-flannel.yml\n</code></pre></p> <p>Create namespaces in kubernetes <pre><code>kubectl create ns ricplt\nkubectl create ns ricxapp\n</code></pre></p> <p>Remove master taint so everything can run on the same machine <pre><code>kubectl taint nodes --all node-role.kubernetes.io/control-plane-\n</code></pre></p> <p>Clone O-RAN SCs <code>ric-dep</code> repository <pre><code>git clone \n</code></pre></p> <p>Start a chartsmuseum instance (this is a repository for helm charts). <pre><code>chartmuseum --debug --port 6873 --storage local --storage-local-rootdir $HOME/helm/chartsmuseum/\n</code></pre></p> <p>Add the local museum to helm <pre><code>helm repo add local http://localhost:6873/\nhelm repo list\n</code></pre></p> <p>Build the helm charts and upload them to the local chartsmuseum <pre><code>cd helm/charts\nmake nearrtric\n</code></pre></p> <p>Install the RIC using the provided in the ric-dep repository <pre><code>helm install nearrtric -n ricplt local/nearrtric -f RECIPE_EXAMPLE/example_recipe_oran_h_release.yaml\n</code></pre></p>"},{"location":"rics/rics/","title":"RAN Intelligent Controllers (RICs)","text":""},{"location":"rics/rics/#data-collection","title":"Data collection","text":"<p><code>sudo tcpdump -i bri0 -q -w teste \"sctp port 80\"</code></p>"},{"location":"ue/simcard/","title":"SIM cards","text":"<p>The SIM cards user are made by osmocom so we used their tool to flash new identities to the cards. <pre><code>git clone https://github.com/osmocom/pysim\ncd pysim\nsudo apt-get install --no-install-recommends \\\n    pcscd libpcsclite-dev \\\n    python3 \\\n    python3-setuptools \\\n    python3-pyscard \\\n    python3-pip\npip3 install -r requirements.txt\n</code></pre></p> <p>The values in the card used in our testing was flashed using the following command (note: the <code>-a</code> part is your ADM-KEY and it will differ from ours) <pre><code>./pySim-prog.py -p0 -s 8988211000000689615 --mcc=001 --mnc=01 -a 77190612 --imsi=001010123456789  -k 41B7157E3337F0ADD8DA89210D89E17F --opc=1CD638FC96E02EBD35AA0D41EB6F812F\n</code></pre></p>"}]}